@page "/addOrEditService/{parameter}"
@using Calculatoare.Shared
@using Calculatoare.Shared.Order
@inject HttpClient Http
@inject NavigationManager Navigation

@if (Service.ItemId == 0)
{
    <h2>Add</h2>
}
else
{
    <h2>Edit</h2>
}

<div class="container">
    <EditForm Model="Service" OnSubmit="AddOrEdit">
        @if (Service.ItemId == 0)
        {
            <h2>Add</h2>
        }
        else
        {
            <h2>Edit</h2>
        }

        <div class="content">
            <div class="input-box">
                <label for="Title">Title</label>
                <InputText id="Title" @bind-Value="Service.Title" />
            </div>
            <div class="input-box">
                <label for="description">Description</label>
                <InputText id="description" @bind-Value="Service.Description" />
            </div>
            <div class="input-box">
                <label for="price">Price</label>
                <InputNumber id="price" @bind-Value="Service.Price" />
            </div>

            <div style="display: flex; gap: 10px;">
                @if (Service.PictureURL != null)
                {
                    <img style="width: 180px;" src="data:image;base64,@System.Convert.ToBase64String(Service.PictureURL)" />
                }
                <MudFileUpload Context="anotherCtx" T="IBrowserFile" FilesChanged="UploadPicture">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Image"
                                   for="@anotherCtx.Id">
                            Upload Picture
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>
        </div>
        <div class="button-container">
            <button type="submit">Send</button>
        </div>
    </EditForm>
</div>

@code {
    public Item Service { get; set; }

    [Parameter]
    public string? parameter { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!int.TryParse(parameter, out int ItemId))
            throw new Exception("Something went wrong");
        if (ItemId == 0)
            Service = new Item();
        else
        {
            var result = await Http.GetAsync($"Services/{ItemId}");
            var content = await result.Content.ReadAsStringAsync();

            var service = JsonConvert.DeserializeObject<ServiceResponse<Item>>(content);
            Service = service.Data;

            StateHasChanged();
        }
    }

    async Task AddOrEdit()
    {
        var result = await Http.PostAsJsonAsync("Services/AddOrEdit", Service);
        if (result.IsSuccessStatusCode)
        {
            var content = await result.Content.ReadAsStringAsync();
            Navigation.NavigateTo("/services");
        }
    }

    private async Task UploadPicture(IBrowserFile file)
    {
        var path = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());

        await using var fs = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fs);

        var bytes = new byte[file.Size];

        fs.Position = 0;

        await fs.ReadAsync(bytes);
        fs.Close();

        Service.PictureURL = bytes;

        File.Delete(path);

        StateHasChanged();
    }
}
