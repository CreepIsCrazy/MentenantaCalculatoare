@page "/services"
@using Calculatoare.Data.Models
@using Calculatoare.Shared
@using Calculatoare.Shared.Order
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Servicii</h3>
<a @onclick="@(_ => AddOrEditService(0))">add service</a>
<button @onclick="GetServices">Refresh services</button>

@if (IsBusy)
{
    <h1>Page loading.....</h1>
}
else
{
    if (ServicesList is null || ServicesList.Count == 0)
    {
        <h1>No services</h1>
    }
    else
    {
        foreach (var service in ServicesList)
        {
            <div style="display: flex; gap: 10px;">
                @if(service.PictureURL != null)
                {
                    <img loading="lazy" style="width: 180px;" src="data:image;base64,@System.Convert.ToBase64String(service.PictureURL)" />
                }
                <p style="margin: 0px 10px">@service.Title</p>
                <p style="margin: 0px 10px">@service.Description</p>
                <p style="margin: 0px 10px">@service.Price</p>
            </div>
            <div style="display: flex; gap: 10px;">
                <a @onclick="@(_ => AddOrEditService(service.ItemId))">edit</a>
                <a @onclick="@(_ => RemoveService(service.ItemId))">remove</a>
            </div>
        }
    }
}

@code {
    private bool IsBusy = false;
    private ObservableCollection<Item> ServicesList = [];

    protected override async Task OnInitializedAsync()
    {
        await GetServices();

        await base.OnInitializedAsync();
    }

    private async Task GetServices()
    {
        IsBusy = true;

        ServicesList.Clear();
        var result = await Http.GetAsync("Services");
        var content = await result.Content.ReadAsStringAsync();

        var services = JsonConvert.DeserializeObject<ServiceResponse<List<Item>>>(content);
        if (services is not null || services.Data.Count > 0)
            foreach (var service in services.Data)
                ServicesList.Add(service);

        IsBusy = false;
        StateHasChanged();
    }

    private async Task RemoveService(int id)
    {
        IsBusy = true;

        if (id == 0)
            return;

        var result = await Http.DeleteAsync($"Services/{id}");
        if (!result.IsSuccessStatusCode)
        {
            Console.WriteLine(await result.Content.ReadAsStringAsync());
            IsBusy = false;
            return;
        }

        ServicesList.Clear();
        result = await Http.GetAsync("Services");
        var content = await result.Content.ReadAsStringAsync();

        var services = JsonConvert.DeserializeObject<ServiceResponse<List<Item>>>(content);
        if (services is not null || services.Data.Count > 0)
            foreach (var service in services.Data)
                ServicesList.Add(service);

        IsBusy = false;
        StateHasChanged();
    }

    public void AddOrEditService(int id)
    {
        Navigation.NavigateTo($"/addOrEditService/{id}");
    }
}
