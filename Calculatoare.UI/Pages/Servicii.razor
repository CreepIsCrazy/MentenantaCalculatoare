@page "/servicii"
@using Calculatoare.Shared
@using Calculatoare.Shared.Order
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<PageTitle>Servicii</PageTitle>

<!-------Despre noi continut------->
<section class="border">
    @if (IsBusy)
    {
        <h1>@ResultMessage</h1>
    }
    else
    {
        if (ServicesList is null || ServicesList.Count == 0)
        {
            <h1>@ResultMessage</h1>
        }
        else
        {
            <div style="display: flex; flex-wrap: wrap; gap: 10px; margin: 0px 10px; justify-content: center;">
                <Virtualize Items="ServicesList" Context="service">
                    <div style="width: 190px">
                        <div class="border-col">
                            <div class="cutie">
                                @if (service.PictureURL != null)
                                {
                                    <img loading="lazy" style="width: 180px; margin: auto;" src="data:image;base64,@System.Convert.ToBase64String(service.PictureURL)" />
                                }
                            </div>
                            <h4>@service.Title <br>  <br> </h4>
                            <p>@service.Description</p>
                            <h3>@service.Price RON</h3>
                            <button class="hero-btn hero-btnn red-btn" @onclick=@(async () => await AddItemToCart(service))>
                                Adaugă în coș.
                            </button>
                        </div>
                        <hr width="1" size="160" style="0 auto" />
                    </div>
                </Virtualize>
            </div>
        }
    }
    
    <div class="da"></div>
</section>
<script src="app.js"></script>

@code {
    public Calculatoare.Shared.Order.Cart _Cart { get; set; }
    private ObservableCollection<Item> ServicesList = [];
    private bool IsBusy = false;

    private string ResultMessage = "Loading ...";

    protected override async Task OnInitializedAsync()
    {
        await Initialize();
    }

    private async Task Initialize()
    {
        _Cart = await LocalStorage.GetItemAsync<Calculatoare.Shared.Order.Cart>("cart");

        await GetServices();

        StateHasChanged();
    }

    private async Task GetServices()
    {
        IsBusy = true;

        ResultMessage = "Loading ...";

        ServicesList.Clear();
        var result = await Http.GetAsync("Services");
        var content = await result.Content.ReadAsStringAsync();

        var services = JsonConvert.DeserializeObject<ServiceResponse<List<Item>>>(content);
        if (!services.Success)
        {
            ResultMessage = "Failed to get services";
            IsBusy = false;
            return;
        }

        if (services is not null || services.Data.Count > 0)
            foreach (var service in services.Data)
                ServicesList.Add(service);

        IsBusy = false;
        StateHasChanged();
    }

    private async Task AddItemToCart(Item item)
    {
        if (_Cart is null)
            _Cart = new();

        var itemtoAdd = new Item
            {
                ItemId = item.ItemId,
                Title = item.Title,
                Description = item.Description,
                Price = item.Price,
                Quantity = 1
            };

        var cartItem = _Cart.Items.FirstOrDefault(x => x.ItemId == itemtoAdd.ItemId);
        if (cartItem is null)
            _Cart.Items.Add(itemtoAdd);
        else cartItem.Quantity++;

        await LocalStorage.SetItemAsync("cart", _Cart);

        StateHasChanged();
    }
}